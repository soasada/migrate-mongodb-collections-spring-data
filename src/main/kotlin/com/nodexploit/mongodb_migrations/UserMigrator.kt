package com.nodexploit.mongodb_migrations

import kotlinx.coroutines.reactor.mono
import org.bson.Document
import org.reactivestreams.Publisher
import org.springframework.context.ApplicationContext
import org.springframework.data.mongodb.core.mapping.event.ReactiveAfterConvertCallback
import org.springframework.stereotype.Component

@Component
class UserMigrator(private val applicationContext: ApplicationContext) : ReactiveAfterConvertCallback<User> {
    override fun onAfterConvert(entity: User, document: Document, collection: String): Publisher<User> = mono {
        if (entity.emailConfirmed != null) {
            return@mono entity
        } else {
            val migratedUser = entity.confirmEmail()
            applicationContext.getBean(UserRepository::class.java).save(migratedUser)
            return@mono migratedUser
        }
    }
}